import numpy as np

__location__ = "{{ __location__ }}"
out_dir = "{{ out_dir }}"
enzyme = "{{ enzyme }}"
fasta_dir = "{{ fasta_dir }}"
dynamic_range = "{{ min_mw }} {{ max_mw }}"
scrambled = str({{ scrambled }})
min_charge = "{{ min_charge }}"
ph = "{{ ph }}"
algorithm = "{{ algorithm }}"
specificity = "{{ specificity }}"
subsampling_fraction = float({{ subsampling_fraction }})

# Variable parameters
resolution = {{ resolution }}
efficiency = {{ efficiency }}
catch_rate = {{ catch_rate }}
soma_cr = {{ soma_cr }}

idx_range = np.arange(int({{ repeats }}))


{{ target_rule }}


rule resolution_plot:
    input:
        in_csv=expand(f'{out_dir}resolution{{ "{{res}}" }}_catch_rate{catch_rate}_efficiency{efficiency}_somacr{soma_cr}/plots/{{ "{{idx}}" }}/classification_eval.csv', res={{ res_range }}, idx=idx_range)
    params:
        param_name='resolution'
    output:
        eff_svg=f'{out_dir}meta_plots/accuracy_vs_resolution.svg'
    shell:
         """
         python {__location__}/plot_range.py --in-csv {input.in_csv} --out-svg {output.eff_svg} \
            --param-name {params.param_name}
         """

rule catch_rate_plot:
    input:
        in_csv=expand(f'{out_dir}resolution{resolution}_catch_rate{{ "{{cr}}" }}_efficiency{efficiency}_somacr{soma_cr}/plots/{{ "{{idx}}" }}/classification_eval.csv', cr={{ cr_range }}, idx=idx_range)
    params:
        param_name='catch_rate'
    output:
        eff_svg=f'{out_dir}meta_plots/accuracy_vs_catch_rate.svg'
    shell:
         """
         python {__location__}/plot_range.py --in-csv {input.in_csv} --out-svg {output.eff_svg} \
            --param-name {params.param_name}
         """

rule efficiency_plot:
    input:
        in_csv=expand(f'{out_dir}resolution{resolution}_catch_rate{catch_rate}_efficiency{{ "{{eff}}" }}_somacr{soma_cr}/plots/{{ "{{idx}}" }}/classification_eval.csv', eff={{ eff_range }}, idx=idx_range)
    params:
        param_name='efficiency'
    output:
        eff_svg=f'{out_dir}meta_plots/accuracy_vs_efficiency.svg'
    shell:
         """
         python {__location__}/plot_range.py --in-csv {input.in_csv} --out-svg {output.eff_svg} \
            --param-name {params.param_name}
         """

rule soma_cr_plot:
    input:
        in_csv=expand(f'{out_dir}resolution{resolution}_catch_rate{catch_rate}_efficiency{efficiency}_somacr{{ "{{scr}}" }}/plots/{{ "{{idx}}" }}/classification_eval.csv', scr={{ soma_cr_range }}, idx=idx_range)
    params:
        param_name='somacr'
    output:
        eff_svg=f'{out_dir}meta_plots/accuracy_vs_somacr.svg'
    shell:
         """
         python {__location__}/plot_range.py --in-csv {input.in_csv} --out-svg {output.eff_svg} \
            --param-name {params.param_name}
         """


rule plot:
    input:
        in_pkl=f'{out_dir}resolution{{ "{{res}}" }}_catch_rate{{ "{{cr}}" }}_efficiency{{ "{{eff}}" }}_somacr{{ "{{scr}}" }}/classifications/classified_{{ "{{idx}}" }}.pkl',
        perfect_pkl = f'{out_dir}digested_products_database.pkl'
    output:
        csv=f'{out_dir}resolution{{ "{{res}}" }}_catch_rate{{ "{{cr}}" }}_efficiency{{ "{{eff}}" }}_somacr{{ "{{scr}}" }}/plots/{{ "{{idx}}" }}/classification_eval.csv'
    shell:
         """
         python {__location__}/plot_classification_results.py --classify-pkl {input.in_pkl} --targets-pkl \
                {input.perfect_pkl} --out-dir {out_dir}resolution{wildcards.res}_catch_rate{wildcards.cr}_efficiency{wildcards.eff}_somacr{wildcards.scr}/plots/{wildcards.idx}/
         """


rule classify:
    input:
        digest_database=f'{out_dir}digested_products_database.pkl',
        digest_targets=f'{out_dir}resolution{{ "{{res}}" }}_catch_rate{{ "{{cr}}" }}_efficiency{{ "{{eff}}" }}/digestions/digested_products_{{ "{{idx}}" }}.pkl'
    output:
        pkl=f'{out_dir}resolution{{ "{{res}}" }}_catch_rate{{ "{{cr}}" }}_efficiency{{ "{{eff}}" }}_somacr{{ "{{scr}}" }}/classifications/classified_{{ "{{idx}}" }}.pkl'
    threads: {{ cores }}
    shell:
        """
        python {__location__}/classify.py --db {input.digest_database} --targets {input.digest_targets} \
                --soma-cr {wildcards.scr} --resolution {wildcards.res} \
                --out-pkl {output.pkl} --cores {threads} --algorithm {algorithm} --save-matching-fps
        """


rule digest_target:
    output:
        digest_pkl=f'{out_dir}resolution{{ "{{res}}" }}_catch_rate{{ "{{cr}}" }}_efficiency{{ "{{eff}}" }}/digestions/digested_products_{{ "{{idx}}" }}.pkl'
    shell:
        """
        python {__location__}/digest.py --in-dir {fasta_dir} --out-pkl {output.digest_pkl} --enzyme {enzyme} \
                --dynamic-range {dynamic_range} --ph {ph} --min-charge {min_charge} \
                --catch-rate {wildcards.cr} \
                --subsampling-fraction {subsampling_fraction} \
                --resolution {wildcards.res} --specificity {specificity} --efficiency {wildcards.eff} --repeats 1
        """

rule digest_perfect:
    output:
        digest_pkl=f'{out_dir}digested_products_database.pkl'
    shell:
        """
        python {__location__}/digest.py --in-dir {fasta_dir} --out-pkl {output.digest_pkl} --enzyme {enzyme} \
                --dynamic-range {dynamic_range} --ph {ph} --min-charge {min_charge} \
                --resolution 0.0 --specificity 1.0 --efficiency 1.0 --repeats 1
        """
